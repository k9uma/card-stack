/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cardstackapplication.view;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import cardstackapplication.logic.DiceRoll;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Random;
import java.util.Set;

/**
 *
 * @author SonOfBatman
 */
public class GUI extends javax.swing.JFrame {
    /**
     * Create a DiceRoll Object So We can Access DiceRoll methods
     */
    DiceRoll dice;
    LinkedHashMap dataStorage = new LinkedHashMap();
    LinkedHashMap<String, ArrayList> drawnStacks = new LinkedHashMap<String, ArrayList>();
    LinkedHashMap<String, ArrayList> cardsRemoved = new LinkedHashMap<String, ArrayList>();

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnPrevNumDice = new javax.swing.JButton();
        btnReqRoll = new javax.swing.JButton();
        btnPeek = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        shuffleStack = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPrevNumDice.setText("Previous # of Dice");
        btnPrevNumDice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevNumDiceActionPerformed(evt);
            }
        });

        btnReqRoll.setText("Request Dice Roll");
        btnReqRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReqRollActionPerformed(evt);
            }
        });

        btnPeek.setText("Peek");
        btnPeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPeekActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 726, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );

        shuffleStack.setText("Shuffle");
        shuffleStack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleStackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnPrevNumDice)
                        .addGap(18, 18, 18)
                        .addComponent(btnReqRoll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPeek, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(shuffleStack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrevNumDice)
                    .addComponent(btnReqRoll)
                    .addComponent(btnPeek)
                    .addComponent(shuffleStack))
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**************************************************************************************************************
    Previous Number of dice requested => Deal off the stack and store in a list of drawn numbers
    ***************************************************************************************************************
    */
    private void btnPrevNumDiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevNumDiceActionPerformed
        //Code Implementation here
        ArrayList<String> drawnNumbers = new ArrayList<String>();
        /*Iterator<Map.Entry<String,String>> iter = dataStorage.entrySet().iterator();
        Map.Entry<String,String> entry = null;
        while(iter.hasNext()) {
        entry = iter.next();
        }
        String key= entry.getKey();
        drawnNumbers.add(key);
        System.out.println(key);*/
        ArrayList rValues = (ArrayList) dataStorage.get(diceRoll);
        System.out.println(rValues.get(2));
        
    }//GEN-LAST:event_btnPrevNumDiceActionPerformed

    private void btnReqRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReqRollActionPerformed
        // TODO Request Dice ROll Functionality
        JTextField numOfDie = new JTextField();
        JTextField numOfFaces = new JTextField();
        JTextField cardsToDeal = new JTextField();
        Object[] message = {
            "Number Of Dice:", numOfDie,
            "Number of Faces:", numOfFaces,
            "Cards To Remove:", cardsToDeal
        };
        int cardsDealt = 0;
        int option = JOptionPane.showConfirmDialog(null, message, "Faces, Die, Cards to Deal", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {  
            if(cardsToDeal.getText().isEmpty()){
                cardsDealt = 0;
                diceRoll = numOfDie.getText()+"d"+numOfFaces.getText()+"-"+Integer.toString(cardsDealt);
                // Key might be present...
                if (dataStorage.containsKey(diceRoll)) {
                    
                    /*
                    
                    */
                    ArrayList rValues = (ArrayList) dataStorage.get(diceRoll);
                    System.out.println(rValues.get(2));
                    
                } else {
                   // Definitely no such key
                int numFaces = Integer.parseInt(numOfFaces.getText());
                int numDice = Integer.parseInt(numOfDie.getText());
                int dice;
                ArrayList num_freq = new ArrayList();
                ArrayList<Integer> distribution = new ArrayList<Integer>();
                Random rand = new Random();
                int summation = 0;
                for ( int roll1 = 1; roll1 <=10000; roll1++ ) {
                    int total = 0; 
                    for(int j = 0; j<= numDice; j++){
                        dice =  rand.nextInt(40)+ 2;
                        summation = total+dice;
                    }
                    distribution.add(summation);
                }
                for (int i = 0; i <= distribution.size(); i++){
                    num_freq.add(Collections.frequency(distribution, i));
                }
                dataStorage.put(diceRoll,num_freq);
            // Get a set of the entries
                Set set = dataStorage.entrySet();

                // Get an iterator
                Iterator i = set.iterator();

                // Display elements
                while(i.hasNext()) {
                   Map.Entry me = (Map.Entry)i.next();
                   System.out.print(me.getKey() + ": ");
                   System.out.println(me.getValue());
                }
                int numberofitems = num_freq.size();
                System.out.println(numberofitems);
            }
        }else{
                diceRoll = numOfDie.getText()+"d"+numOfFaces.getText()+"-"+cardsToDeal.getText();
                // Key might be present...
                if (dataStorage.containsKey(diceRoll)) {
                    ArrayList rValues = (ArrayList) dataStorage.get(diceRoll);
                    System.out.println(rValues.get(2));
                 
                } else {
                   // Definitely no such key
                    int numFaces = Integer.parseInt(numOfFaces.getText());
                    int numDice = Integer.parseInt(numOfDie.getText());
                    int numcardsRemoved = Integer.parseInt(cardsToDeal.getText());
                    int dice;
                    LinkedHashMap num_freq = new LinkedHashMap();
                    ArrayList<Integer> distribution = new ArrayList<Integer>();
                    Random rand = new Random();
                    int summation = 0;
                    for ( int roll1 = 1; roll1 <=10000; roll1++ ) {
                        int total = 0; 
                        for(int j = 0; j<= numDice; j++){
                            dice =  rand.nextInt(40)+ 2;
                            summation = total+dice;
                        }
                        distribution.add(summation);
                    }
                    //Shuffle the distribution
                    Collections.shuffle(distribution);
                    
                    //Remove the requested number of cards off the top
                    /*Iterator<Integer> deal = distribution.iterator();
                    while(deal.hasNext()){
                        Integer integer = deal.next();
                        if(integer < numcardsRemoved){
                            int value = deal.hasNext()
                            deal.remove();
                            cardsRemoved.put(diceRoll, );
                        }
                    }*/
                    ArrayList<Integer> cards = new ArrayList<Integer>();
                    for(int i=1; i<=numcardsRemoved; i++){
                        int value = distribution.get(i);
                        distribution.remove(i);
                        cards.add(value);
                    }
                    for (int i = 0; i <= distribution.size(); i++){
                        num_freq.put(i, Collections.frequency(distribution, i));
                    }
                    dataStorage.put(diceRoll,num_freq);
                    // Get a set of the entries
                        Set set = dataStorage.entrySet();

                        // Get an iterator
                        Iterator i = set.iterator();

                        // Display elements
                        while(i.hasNext()) {
                           Map.Entry me = (Map.Entry)i.next();
                           System.out.print(me.getKey() + ": ");
                           System.out.println(me.getValue());
                        }
                        int numberofitems = num_freq.size();
                        System.out.println(numberofitems);
                }
           }
        } else {
            System.out.println("Deal later");
            
        }
        

    }//GEN-LAST:event_btnReqRollActionPerformed

    private void btnPeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPeekActionPerformed
        // TODO add your handling code here:
        // TODO Request Dice ROll Functionality
        JTextField stack = new JTextField();
        //JTextField cardsToDeal = new JTextField();
        Object[] message = {
            "Stack:", stack,
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Peek", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            diceRoll = stack.getText();
            // Key might be present...
            if (dataStorage.containsKey(diceRoll)) {
               System.out.println("I exist, wanna see my distribution");
            } else {
                System.out.println("Stsck Doesnt Exist");
            }
        }else{
        }
    }//GEN-LAST:event_btnPeekActionPerformed

    private void shuffleStackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleStackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shuffleStackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    
    //Declaration of Variables
    private String diceRoll;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPeek;
    private javax.swing.JButton btnPrevNumDice;
    private javax.swing.JButton btnReqRoll;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton shuffleStack;
    // End of variables declaration//GEN-END:variables
}
